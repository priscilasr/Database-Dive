/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */




import java.sql.*;
import java.util.Scanner;
import javax.swing.JOptionPane;
import java.util.Vector;
//import java.sql.DriverManager;

public class ContentAnalyst extends javax.swing.JFrame {
    
    /** Creates new form Antenna */
    public ContentAnalyst() {
        
       
        initComponents();
        name.setText("  titanic {float: none;}");
        TextName.setText("Content Analyst");
        DatesButton.setVisible(false);
        StartButton.setVisible(false);
        EndButton.setVisible(false);
        
        
        
        
    }
    
    Scanner Maya = new Scanner(System.in);
    
   
    
    String customerID = "";
    boolean tomato = false;
    boolean trending = false;
    
    
    
    
   
    
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jPanel2 = new javax.swing.JPanel();
        Recommended = new javax.swing.JButton();
        GenreButton = new javax.swing.JButton();
        TrendingBotton = new javax.swing.JButton();
        getUser = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        HollywoodPairsButton = new javax.swing.JButton();
        freshtomatobutton = new javax.swing.JButton();
        CultClassicsButton = new javax.swing.JButton();
        TrendingBotton1 = new javax.swing.JButton();
        EndButton = new javax.swing.JTextField();
        StartButton = new javax.swing.JTextField();
        TextName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Result = new javax.swing.JTextArea();
        DatesButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        GetUser1 = new javax.swing.JTextField();
        HomeButton1 = new javax.swing.JButton();
        name = new javax.swing.JTextField();

        jScrollPane1.setViewportView(jEditorPane1);

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        jPanel2.setBackground(new java.awt.Color(0, 0, 204));

        Recommended.setText("RECOMMENDED");

        GenreButton.setText("GENRE");
        GenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenreButtonActionPerformed(evt);
            }
        });

        TrendingBotton.setText("TRENDING");
        TrendingBotton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrendingBottonActionPerformed(evt);
            }
        });

        getUser.setBackground(new java.awt.Color(17, 23, 64));
        getUser.setForeground(new java.awt.Color(149, 152, 207));
        getUser.setText(" Search");
        getUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(GenreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Recommended, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TrendingBotton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getUser, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Recommended)
                    .addComponent(GenreButton)
                    .addComponent(TrendingBotton)
                    .addComponent(getUser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Antenna");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setMaximumSize(new java.awt.Dimension(739, 423));
        jPanel3.setMinimumSize(new java.awt.Dimension(739, 423));
        jPanel3.setPreferredSize(new java.awt.Dimension(739, 423));

        jPanel1.setBackground(new java.awt.Color(102, 204, 255));

        HollywoodPairsButton.setText("HOLLYWOOD PAIRS");
        HollywoodPairsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HollywoodPairsButtonActionPerformed(evt);
            }
        });

        freshtomatobutton.setText("FRESH TOMATO #");
        freshtomatobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freshtomatobuttonActionPerformed(evt);
            }
        });

        CultClassicsButton.setText("CULT CLASSICS");
        CultClassicsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CultClassicsButtonActionPerformed(evt);
            }
        });

        TrendingBotton1.setText("TRENDING");
        TrendingBotton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrendingBotton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(freshtomatobutton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CultClassicsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(HollywoodPairsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TrendingBotton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(TrendingBotton1)
                .addGap(53, 53, 53)
                .addComponent(HollywoodPairsButton)
                .addGap(53, 53, 53)
                .addComponent(freshtomatobutton)
                .addGap(53, 53, 53)
                .addComponent(CultClassicsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        EndButton.setBackground(new java.awt.Color(204, 204, 204));
        EndButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EndButtonActionPerformed(evt);
            }
        });

        StartButton.setBackground(new java.awt.Color(204, 204, 204));
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        TextName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        TextName.setBorder(null);
        TextName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextNameActionPerformed(evt);
            }
        });

        Result.setColumns(20);
        Result.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        Result.setRows(5);
        Result.setAlignmentX(2.0F);
        Result.setAlignmentY(2.0F);
        Result.setBorder(null);
        jScrollPane2.setViewportView(Result);

        DatesButton.setBackground(new java.awt.Color(255, 255, 255));
        DatesButton.setText("Dates");
        DatesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatesButtonActionPerformed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(0, 0, 204));

        GetUser1.setBackground(new java.awt.Color(204, 204, 204));
        GetUser1.setText("Costumer ID");
        GetUser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetUser1ActionPerformed(evt);
            }
        });

        HomeButton1.setText("HOME");
        HomeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButton1ActionPerformed(evt);
            }
        });

        name.setBackground(new java.awt.Color(0, 0, 204));
        name.setFont(new java.awt.Font("Trebuchet MS", 3, 14)); // NOI18N
        name.setForeground(new java.awt.Color(102, 204, 255));
        name.setText("titanic {float: none;} ");
        name.setBorder(null);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(HomeButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(126, 126, 126)
                .addComponent(GetUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GetUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HomeButton1))
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(name)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(TextName, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(EndButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(DatesButton)
                                        .addGap(103, 103, 103))))))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(DatesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EndButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(TextName, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenreButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GenreButtonActionPerformed

    private void TrendingBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrendingBottonActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:

    }//GEN-LAST:event_TrendingBottonActionPerformed

    private void getUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getUserActionPerformed

    private void TrendingBotton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrendingBotton1ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        
        tomato = false;
        trending = true;

        Result.setText(" ");
        TextName.setText("Top 10 Trending Content");
        StartButton.setVisible(true);
        EndButton.setVisible(true);
        DatesButton.setVisible(true);
        

        

        
        
        
       

            Connection conn = null;
            String teamNumber = "1";
            String sectionNumber = "914";
            String dbName = "csce315" + "_" + sectionNumber + "_" + teamNumber + "_" + "db";
            String dbConnectionString = "jdbc:postgresql://csce-315-db.engr.tamu.edu/" + dbName;
            String userName = "csce315" + "_" + sectionNumber + "_" + teamNumber + "_" + "user";
            String userPassword = "PZKNJ123";
            //Building the connection

            try{
                Class.forName("org.postgresql.Driver");
                conn = DriverManager.getConnection(dbConnectionString,userName, userPassword);
            } catch (Exception e) {
                e.printStackTrace();
                System.err.println(e.getClass().getName()+": "+e.getMessage());
                System.exit(0);
            }//end try catch

            Vector<String> vector = new Vector<>();

            String titleid = "";
            try{
                //create a statement object
                Statement stmt = conn.createStatement();

                //create an SQL statement
                String sqlStatement = "SELECT titleid,\n COUNT(customerid)\nFROM ratings\nGROUP BY titleid\nORDER BY COUNT(customerid) DESC\nFETCH FIRST 10 ROWS ONLY;";

                //send statement to DBMS
                ResultSet result1 = stmt.executeQuery(sqlStatement);

                //OUTPUT

                //System.out.println("______________________________________");
                while (result1.next()) {
                    //System.out.println(result.getString("cus_lname"));

                    titleid += result1.getString("titleid")+"\n";
                    vector.add(result1.getString("titleid"));

                  

                }

            }
            catch(Exception e){
                e.printStackTrace();
                System.err.println(e.getClass().getName()+": "+e.getMessage());
                //System.exit(0);
            }

            String originaltitle = "";

            String sqlStatement = "";
            for(int i = 0; i < vector.size(); i++){
                sqlStatement = "SELECT originaltitle FROM content_management WHERE titleid = '" + vector.get(i) + "';";
                try{
                    //create a statement object
                    Statement stmt = conn.createStatement();

                    //create an SQL statement

                    //send statement to DBMS
                    ResultSet result1 = stmt.executeQuery(sqlStatement);

                    //OUTPUT

                    //System.out.println("______________________________________");
                    while (result1.next()) {
                        //System.out.println(result.getString("cus_lname"));

                        originaltitle += result1.getString("originaltitle")+"\n";

                       

                    }

                }
                catch(Exception e){
                    e.printStackTrace();
                    System.err.println(e.getClass().getName()+": "+e.getMessage());
                    //System.exit(0);
                }

            }
            Result.setText(originaltitle);
        
        

       

        
    }//GEN-LAST:event_TrendingBotton1ActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StartButtonActionPerformed

    private void EndButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EndButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EndButtonActionPerformed

    private void TextNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextNameActionPerformed

    private void DatesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatesButtonActionPerformed
        // TODO add your handling code here:
        
         
        Connection conn = null;
        String teamNumber = "1";
        String sectionNumber = "914";
        String dbName = "csce315" + "_" + sectionNumber + "_" + teamNumber + "_" + "db";
        String dbConnectionString = "jdbc:postgresql://csce-315-db.engr.tamu.edu/" + dbName;
        String userName = "csce315" + "_" + sectionNumber + "_" + teamNumber + "_" + "user";
        String userPassword = "PZKNJ123";
            //Building the connection

        try{
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection(dbConnectionString,userName, userPassword);
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
            System.exit(0);
        }//end try catch

        
        if(trending){
            
            String startdate = StartButton.getText();
            String enddate = EndButton.getText();

           
            Vector<String> vector = new Vector<>();

            String titleid = "";
            try{
                //create a statement object
                Statement stmt = conn.createStatement();

                //create an SQL statement
                String sqlStatement = "SELECT titleid,\nCOUNT(customerid)\nFROM ratings\nWHERE date BETWEEN '" + startdate + "' AND '" + enddate + "'\nGROUP BY titleid\nORDER BY COUNT(customerid) DESC\nFETCH FIRST 10 ROWS ONLY;";               

                //send statement to DBMS
                ResultSet result1 = stmt.executeQuery(sqlStatement);

                //OUTPUT

                //System.out.println("______________________________________");
                while (result1.next()) {
                    //System.out.println(result.getString("cus_lname"));

                    titleid += result1.getString("titleid")+"\n";
                    vector.add(result1.getString("titleid"));

                    //originaltitle += result2.getString("originaltitle")+"\n";
                    //System.err.println(result2.getString("originaltitle"));
                    /*

                    Statement stmt1 = conn.createStatement();
                    result2 = stmt1.executeQuery(sqlStatement);
                    //System.err.println(result2.getString("originaltitle"));
                    originaltitle = result2.getString("originaltitle")+"\n";
                    */

                }

            }
            catch(Exception e){
                e.printStackTrace();
                System.err.println(e.getClass().getName()+": "+e.getMessage());
                //System.exit(0);
            }

            String originaltitle = "";

            String sqlStatement = "";
            for(int i = 0; i < vector.size(); i++){
                sqlStatement = "SELECT originaltitle FROM content_management WHERE titleid = '" + vector.get(i) + "';";
                try{
                    //create a statement object
                    Statement stmt = conn.createStatement();

                    //create an SQL statement

                    //send statement to DBMS
                    ResultSet result1 = stmt.executeQuery(sqlStatement);

                    //OUTPUT

                    //System.out.println("______________________________________");
                    while (result1.next()) {
                        //System.out.println(result.getString("cus_lname"));

                        originaltitle += result1.getString("originaltitle")+"\n";

                        
                    }

                }
                catch(Exception e){
                    e.printStackTrace();
                    System.err.println(e.getClass().getName()+": "+e.getMessage());
                    //System.exit(0);
                }

            }


            Result.setText(originaltitle);
            
        }
        if(tomato){
            String title1name = StartButton.getText();
            String title2name = EndButton.getText();
            
            String titleid1 = "";
            String titleid2 = "";
            
            String finalstring = "";
            
            
            try{
                //create a statement object
                String sqlStatement = "SELECT titleid FROM content_management WHERE originaltitle = '" + title1name + "';";
                Statement stmt = conn.createStatement();

                //create an SQL statement

                //send statement to DBMS
                ResultSet result1 = stmt.executeQuery(sqlStatement);

                //OUTPUT

                //System.out.println("______________________________________");
                while (result1.next()) {
                    //System.out.println(result.getString("cus_lname"));

                    titleid1 = result1.getString("titleid");



                }

            }
            catch(Exception e){
                e.printStackTrace();
                System.err.println(e.getClass().getName()+": "+e.getMessage());
                //System.exit(0);
            }
            
            
            
            
            try{
                //create a statement object
                String sqlStatement = "SELECT titleid FROM content_management WHERE originaltitle = '" + title2name + "';";
                Statement stmt = conn.createStatement();

                //create an SQL statement

                //send statement to DBMS
                ResultSet result1 = stmt.executeQuery(sqlStatement);

                //OUTPUT

                //System.out.println("______________________________________");
                while (result1.next()) {
                    //System.out.println(result.getString("cus_lname"));

                    titleid2 = result1.getString("titleid");



                }

            }
            catch(Exception e){
                e.printStackTrace();
                System.err.println(e.getClass().getName()+": "+e.getMessage());
                //System.exit(0);
            }


            Vector<String> vector = new Vector<>();

            String title2 = "";
            try{
                //create a statement object
                Statement stmt = conn.createStatement();
                

                //create an SQL statement
                String sqlStatement = "SELECT DISTINCT r2.titleId AS title2, r1.customerId, r1.titleId AS title1\nFROM ratings AS r1, ratings AS r2\nWHERE '" + titleid1 + "'= r1.titleID\nAND r1.customerId = r2.customerId\nAND r1.rating >= 4 AND r2.rating >=4;";
                //String sqlStatement = "SELECT title2 FROM testtomato;";
                


                //send statement to DBMS
                
                ResultSet result1 = stmt.executeQuery(sqlStatement);

                //OUTPUT

                //System.out.println("______________________________________");
                while (result1.next()) {
                    //System.out.println(result.getString("cus_lname"));

                    title2 += result1.getString("title2")+"\n";
                    vector.add(result1.getString("title2"));



                }
                

            }      
            catch(Exception e){
                e.printStackTrace();
                System.err.println(e.getClass().getName()+": "+e.getMessage());
                //System.exit(0);
            }

            

            String costumerid1 = "";
            try{
                //create a statement object
                Statement stmt = conn.createStatement();
                

                //create an SQL statement
                String sqlStatement = "SELECT customerId\nFROM (\nSELECT title2, customerId, title1 FROM\n(SELECT DISTINCT r2.titleId AS title2, r1.customerId, r1.titleId AS title1\nFROM ratings AS r1, ratings AS r2\nWHERE '" + titleid1 + "'= r1.titleID\nAND r1.customerId = r2.customerId\nAND r1.rating >= 4 AND r2.rating >=4) AS round1) as subQ\nFETCH FIRST 1 ROWS ONLY;";
                //String sqlStatement = "SELECT title2 FROM testtomato;";
                


                //send statement to DBMS
                
                ResultSet result1 = stmt.executeQuery(sqlStatement);

                //OUTPUT

                //System.out.println("______________________________________");
                while (result1.next()) {
                    //System.out.println(result.getString("cus_lname"));
                    costumerid1 = result1.getString("customerid");
                    



                }
                

            }      
            catch(Exception e){
                e.printStackTrace();
                System.err.println(e.getClass().getName()+": "+e.getMessage());
                //System.exit(0);
            }

            finalstring += title1name + " -> " + costumerid1;

            
            boolean check = false;
            String Final = "";
            String originaltitle = "";
            
            for(int i = 0; i < vector.size(); i++){
                if(vector.get(i) == titleid2){
                    Final = vector.get(i);
                    try{
                        //create a statement object
                        String sqlStatement = "SELECT originaltitle FROM content_management WHERE titleid = '" + Final + "';";
                        Statement stmt = conn.createStatement();

                        //create an SQL statement

                        //send statement to DBMS
                        ResultSet result1 = stmt.executeQuery(sqlStatement);

                        //OUTPUT

                        //System.out.println("______________________________________");
                        while (result1.next()) {
                            //System.out.println(result.getString("cus_lname"));

                            originaltitle = result1.getString("originaltitle");

                            
                        }

                    }
                    catch(Exception e){
                        e.printStackTrace();
                        System.err.println(e.getClass().getName()+": "+e.getMessage());
                        //System.exit(0);
                    }
                    
                    check = true;
                    finalstring += " -> " + originaltitle;
                    break;
                    
                }
                
                
            }

            Vector<String> vector2 = new Vector<>();

            if(check == false){
                for(int i = 0; i < vector.size(); i++){
                    titleid1 = vector.get(i);
                    try{
                        //create a statement object
                        Statement stmt = conn.createStatement();
                        
            
                        //create an SQL statement
                        String sqlStatement = "SELECT DISTINCT r2.titleId AS title2, r1.customerId, r1.titleId AS title1\nFROM ratings AS r1, ratings AS r2\nWHERE '" + titleid1 + "'= r1.titleID\nAND r1.customerId = r2.customerId\nAND r1.rating >= 4 AND r2.rating >=4;";
            
                        //send statement to DBMS
                        ResultSet result1 = stmt.executeQuery(sqlStatement);
            
                        //OUTPUT
            
                        //System.out.println("______________________________________");
                        while (result1.next()) {
                            //System.out.println(result.getString("cus_lname"));
            
                            title2 += result1.getString("title2")+"\n";
                            vector2.add(result1.getString("title2"));
            
            
            
                        }
            
                    }
                    
                    
                    
                    catch(Exception e){
                        e.printStackTrace();
                        System.err.println(e.getClass().getName()+": "+e.getMessage());
                        //System.exit(0);
                    }

                    
                    String path1 = "";
                    String path2 = "";
                    String path1title = "";
                    String path2title = "";

                    
                    for(int j = 0; j < vector2.size(); j++){
                        if(vector2.get(j) == titleid2){
                            path1 = vector.get(i);
                            path2 = vector2.get(j);
                            Final = vector.get(i);
                            try{
                                //create a statement object
                                String sqlStatement = "SELECT originaltitle FROM content_management WHERE titleid = '" + path1 + "';";
                                Statement stmt = conn.createStatement();

                                //create an SQL statement

                                //send statement to DBMS
                                ResultSet result1 = stmt.executeQuery(sqlStatement);

                                //OUTPUT

                                //System.out.println("______________________________________");
                                while (result1.next()) {
                                    //System.out.println(result.getString("cus_lname"));

                                    path1title = result1.getString("originaltitle");

                                    
                                }

                            }
                            catch(Exception e){
                                e.printStackTrace();
                                System.err.println(e.getClass().getName()+": "+e.getMessage());
                                //System.exit(0);
                            }
                            Final = vector.get(i);
                            try{
                                //create a statement object
                                String sqlStatement = "SELECT originaltitle FROM content_management WHERE titleid = '" + path2 + "';";
                                Statement stmt = conn.createStatement();

                                //create an SQL statement

                                //send statement to DBMS
                                ResultSet result1 = stmt.executeQuery(sqlStatement);

                                //OUTPUT

                                //System.out.println("______________________________________");
                                while (result1.next()) {
                                    //System.out.println(result.getString("cus_lname"));

                                    path2title = result1.getString("originaltitle");

                                    
                                }

                            }
                            catch(Exception e){
                                e.printStackTrace();
                                System.err.println(e.getClass().getName()+": "+e.getMessage());
                                //System.exit(0);
                            }

                            String costumerid2 = "";
                            try{
                                //create a statement object
                                Statement stmt = conn.createStatement();
                                

                                //create an SQL statement
                                String sqlStatement = "SELECT customerId\nFROM (\nSELECT title2, customerId, title1 FROM\n(SELECT DISTINCT r2.titleId AS title2, r1.customerId, r1.titleId AS title1\nFROM ratings AS r1, ratings AS r2\nWHERE '" + path1 + "'= r1.titleID\nAND r1.customerId = r2.customerId\nAND r1.rating >= 4 AND r2.rating >=4) AS round1) as subQ\nFETCH FIRST 1 ROWS ONLY;";
                                //String sqlStatement = "SELECT title2 FROM testtomato;";
                                


                                //send statement to DBMS
                                
                                ResultSet result1 = stmt.executeQuery(sqlStatement);

                                //OUTPUT

                                //System.out.println("______________________________________");
                                while (result1.next()) {
                                    //System.out.println(result.getString("cus_lname"));

                                    costumerid2 = result1.getString("customerid");



                                }
                                

                            }      
                            catch(Exception e){
                                e.printStackTrace();
                                System.err.println(e.getClass().getName()+": "+e.getMessage());
                                //System.exit(0);
                            }
                            
                            check = true;
                            finalstring += " -> " + path1title + " -> " + costumerid2 + " -> " + path2title;
                            break;
                        }
                        
                    }
                }

                
            }
                
            Result.setText(finalstring);
        }
    
        
        
    }//GEN-LAST:event_DatesButtonActionPerformed

    private void CultClassicsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CultClassicsButtonActionPerformed
        // TODO add your handling code here:
        
         // TODO add your handling code here:
        Result.setText(" ");
        TextName.setText("Top 10 Cult Classics");
        StartButton.setVisible(false);
        EndButton.setVisible(false);
        DatesButton.setVisible(false);
        
        Connection conn = null;
        String teamNumber = "1";
        String sectionNumber = "914";
        String dbName = "csce315" + "_" + sectionNumber + "_" + teamNumber + "_" + "db";
        String dbConnectionString = "jdbc:postgresql://csce-315-db.engr.tamu.edu/" + dbName;
        String userName = "csce315" + "_" + sectionNumber + "_" + teamNumber + "_" + "user";
        String userPassword = "PZKNJ123";
        //Building the connection

        try{
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection(dbConnectionString,userName, userPassword);
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
            System.exit(0);
        }//end try catch

        Vector<String> vector = new Vector<>();

        String titleid = "";
        try{
            //create a statement object
            Statement stmt = conn.createStatement();

            //create an SQL statement
            String sqlStatement = "SELECT titleid from NRF\nFETCH FIRST 10 ROWS ONLY;";

            //send statement to DBMS
            ResultSet result1 = stmt.executeQuery(sqlStatement);

            //OUTPUT

            //System.out.println("______________________________________");
            while (result1.next()) {
                //System.out.println(result.getString("cus_lname"));

                titleid += result1.getString("titleid")+"\n";
                vector.add(result1.getString("titleid"));




            }

        }
        catch(Exception e){
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
            //System.exit(0);
        }

        String originaltitle = "";

        String sqlStatement = "";
        for(int i = 0; i < vector.size(); i++){
            sqlStatement = "SELECT originaltitle FROM content_management WHERE titleid = '" + vector.get(i) + "';";
            try{
                //create a statement object
                Statement stmt = conn.createStatement();

                //create an SQL statement

                //send statement to DBMS
                ResultSet result1 = stmt.executeQuery(sqlStatement);

                //OUTPUT

                //System.out.println("______________________________________");
                while (result1.next()) {
                    //System.out.println(result.getString("cus_lname"));

                    originaltitle += result1.getString("originaltitle")+"\n";



                }

            }
            catch(Exception e){
                e.printStackTrace();
                System.err.println(e.getClass().getName()+": "+e.getMessage());
                //System.exit(0);
            }

        }
        Result.setText(originaltitle);
       
        
        
    }//GEN-LAST:event_CultClassicsButtonActionPerformed

    private void HollywoodPairsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HollywoodPairsButtonActionPerformed
        // TODO add your handling code here:
        
        Result.setText(" ");
        TextName.setText("Top 10 Hollywood Pairs");
        StartButton.setVisible(false);
        EndButton.setVisible(false);
        DatesButton.setVisible(false);
        
        
            Connection conn = null;
            String teamNumber = "1";
            String sectionNumber = "914";
            String dbName = "csce315" + "_" + sectionNumber + "_" + teamNumber + "_" + "db";
            String dbConnectionString = "jdbc:postgresql://csce-315-db.engr.tamu.edu/" + dbName;
            String userName = "csce315" + "_" + sectionNumber + "_" + teamNumber + "_" + "user";
            String userPassword = "PZKNJ123";
            //Building the connection

            try{
                Class.forName("org.postgresql.Driver");
                conn = DriverManager.getConnection(dbConnectionString,userName, userPassword);
            } catch (Exception e) {
                e.printStackTrace();
                System.err.println(e.getClass().getName()+": "+e.getMessage());
                System.exit(0);
            }//end try catch

            Vector<String> actor1vector = new Vector<>();

            String actor1 = "";
            try{
                //create a statement object
                Statement stmt = conn.createStatement();

                //create an SQL statement
                String sqlStatement = "SELECT actor1 from actorspairs\nFETCH FIRST 10 ROWS ONLY;";

                //send statement to DBMS
                ResultSet result1 = stmt.executeQuery(sqlStatement);

                //OUTPUT

                //System.out.println("______________________________________");
                while (result1.next()) {
                    //System.out.println(result.getString("cus_lname"));

                    actor1 += result1.getString("actor1")+"\n";
                    actor1vector.add(result1.getString("actor1"));

                  

                }

            }
            catch(Exception e){
                e.printStackTrace();
                System.err.println(e.getClass().getName()+": "+e.getMessage());
                //System.exit(0);
            }
            
            Vector<String> actor2vector = new Vector<>();

            String actor2 = "";
            try{
                //create a statement object
                Statement stmt = conn.createStatement();

                //create an SQL statement
                String sqlStatement = "SELECT actor2 from actorspairs\nFETCH FIRST 10 ROWS ONLY;";

                //send statement to DBMS
                ResultSet result1 = stmt.executeQuery(sqlStatement);

                //OUTPUT

                //System.out.println("______________________________________");
                while (result1.next()) {
                    //System.out.println(result.getString("cus_lname"));

                    actor2 += result1.getString("actor2")+"\n";
                    actor2vector.add(result1.getString("actor2"));

                  

                }

            }
            catch(Exception e){
                e.printStackTrace();
                System.err.println(e.getClass().getName()+": "+e.getMessage());
                //System.exit(0);
            }
            
            Vector<String> storeactor1vector = new Vector<>();
            Vector<String> storeactor2vector = new Vector<>();

            String primaryname = "";

            String sqlStatement = "";
            for(int i = 0; i < actor1vector.size(); i++){
                sqlStatement = "SELECT primaryname FROM content_viewer WHERE nconst = '" + actor1vector.get(i) + "';";
                try{
                    //create a statement object
                    Statement stmt = conn.createStatement();

                    //create an SQL statement

                    //send statement to DBMS
                    ResultSet result1 = stmt.executeQuery(sqlStatement);

                    //OUTPUT

                    //System.out.println("______________________________________");
                    while (result1.next()) {
                        //System.out.println(result.getString("cus_lname"));

                        primaryname += result1.getString("primaryname")+"\n";
                        storeactor1vector.add(result1.getString("primaryname"));

                       

                    }

                }
                catch(Exception e){
                    e.printStackTrace();
                    System.err.println(e.getClass().getName()+": "+e.getMessage());
                    //System.exit(0);
                }

            }
            
            sqlStatement = "";
            for(int i = 0; i < actor2vector.size(); i++){
                sqlStatement = "SELECT primaryname FROM content_viewer WHERE nconst = '" + actor2vector.get(i) + "';";
                try{
                    //create a statement object
                    Statement stmt = conn.createStatement();

                    //create an SQL statement

                    //send statement to DBMS
                    ResultSet result1 = stmt.executeQuery(sqlStatement);

                    //OUTPUT

                    //System.out.println("______________________________________");
                    while (result1.next()) {
                        //System.out.println(result.getString("cus_lname"));

                        primaryname += result1.getString("primaryname")+"\n";
                        storeactor2vector.add(result1.getString("primaryname"));

                       

                    }

                }
                catch(Exception e){
                    e.printStackTrace();
                    System.err.println(e.getClass().getName()+": "+e.getMessage());
                    //System.exit(0);
                }

            }
            
            String pairs = "";
            
            for(int i = 0; i < storeactor2vector.size(); i++){
                pairs += storeactor1vector.get(i)+ " and " + storeactor2vector.get(i) + "\n";
                
            }
            
            
            
            Result.setText(pairs);
    }//GEN-LAST:event_HollywoodPairsButtonActionPerformed

    private void freshtomatobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freshtomatobuttonActionPerformed
        // TODO add your handling code here:
        tomato = true;
        trending = false;
        Result.setText(" ");
        DatesButton.setText("Enter");
        TextName.setText("Fresh Tomato Number");
        StartButton.setVisible(true);
        EndButton.setVisible(true);
        DatesButton.setVisible(true);
        
       
        

        
        
        
        
        
    }//GEN-LAST:event_freshtomatobuttonActionPerformed

    private void GetUser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetUser1ActionPerformed
        // TODO add your handling code here:
        GetUser.setText("");
    }//GEN-LAST:event_GetUser1ActionPerformed

    private void HomeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        jdbcpostgreSQLGUI obj = new jdbcpostgreSQLGUI();
        obj.setVisible(true);
    }//GEN-LAST:event_HomeButton1ActionPerformed

    
  
    
    
    
    
    
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContentAnalyst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContentAnalyst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContentAnalyst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContentAnalyst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        
        
        
        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContentAnalyst().setVisible(true);
            }
        });
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CultClassicsButton;
    private javax.swing.JButton DatesButton;
    private javax.swing.JTextField EndButton;
    private javax.swing.JButton GenreButton;
    private javax.swing.JTextField GetUser;
    private javax.swing.JTextField GetUser1;
    private javax.swing.JTextField GetUser2;
    private javax.swing.JButton HollywoodPairsButton;
    private javax.swing.JButton HomeButton;
    private javax.swing.JButton HomeButton1;
    private javax.swing.JButton HomeButton2;
    private javax.swing.JButton Recommended;
    private javax.swing.JTextArea Result;
    private javax.swing.JTextField StartButton;
    private javax.swing.JTextField TextName;
    private javax.swing.JButton TrendingBotton;
    private javax.swing.JButton TrendingBotton1;
    private javax.swing.JButton freshtomatobutton;
    private javax.swing.JTextField getUser;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField name;
    // End of variables declaration//GEN-END:variables
    
}
